.data
	str_0: .asciiz "LT is right!"
	str_1: .asciiz "LT is wrong!"
	str_2: .asciiz "LTE is right!"
	str_3: .asciiz "LTE is wrong!"
	str_4: .asciiz "GT is wrong!"
	str_5: .asciiz "GT is right!"
	str_6: .asciiz "GTE is wrong!"
	str_7: .asciiz "GTE is right!"
	str_8: .asciiz "NE is right!"
	str_9: .asciiz "NE is wrong!"
	str_10: .asciiz "EQ is wrong!"
	str_11: .asciiz "EQ is right!"
	str_12: .asciiz "LT is right!"
	str_13: .asciiz "LT is wrong!"
	str_14: .asciiz "LTE is right!"
	str_15: .asciiz "LTE is wrong!"
	str_16: .asciiz "GT is wrong!"
	str_17: .asciiz "GT is right!"
	str_18: .asciiz "GTE is wrong!"
	str_19: .asciiz "GTE is right!"
	str_20: .asciiz "NE is right!"
	str_21: .asciiz "NE is wrong!"
	str_22: .asciiz "EQ is wrong!"
	str_23: .asciiz "EQ is right!"
	str_24: .asciiz "\n"
	str_25: .asciiz "success!"
	str_26: .asciiz " !#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
	str_27: .asciiz "x is 2!"
	str_28: .asciiz "x is 3!"
	str_29: .asciiz "x is unknown!"
.text
	li	$t0, 32
	sub	$sp, $sp, $t0
const int n@0#-16*0 = 10 
var int m@0#-20*0 
var int a@0#-24*0 
var int b@0#-28*0 
void test_array() 
LABEL_func_0_begin: 
var int a [10] 
a[1]@1#-16*0 = 4 
$t0@1#-56 = a[1]@1#-16*0 
$t1@1#-60 = $t0@1#-56 * 100 
printf $t1@1#-60 
$t2@1#-68 = a[1]@1#-16*0 
$t2@1#-68 == 4 
BZ LABEL_if_0_else 
GOTO LABEL_if_0_end 
LABEL_if_0_else: 
a[2]@1#-16*0 = 5 
LABEL_if_0_end: 
int fact() 
int n 
LABEL_func_1_begin: 
n@1#-16*0 == 1 
BZ LABEL_if_1_else 
ret 1 
GOTO LABEL_if_1_end 
LABEL_if_1_else: 
$t3@1#-20 = n@1#-16*0 - 1 
push $t3@1#-20 
call fact 
$t4@1#-24 = ret 
$t5@1#-28 = n@1#-16*0 * $t4@1#-24 
ret $t5@1#-28 
LABEL_if_1_end: 
void test_logic() 
int a 
int b 
char d 
char e 
LABEL_func_2_begin: 
a@1#-16*0 < b@1#-20*0 
BZ LABEL_if_2_else 
printf str_0 
GOTO LABEL_if_2_end 
LABEL_if_2_else: 
printf str_1 
LABEL_if_2_end: 
a@1#-16*0 <= b@1#-20*0 
BZ LABEL_if_3_else 
printf str_2 
GOTO LABEL_if_3_end 
LABEL_if_3_else: 
printf str_3 
LABEL_if_3_end: 
a@1#-16*0 > b@1#-20*0 
BZ LABEL_if_4_else 
printf str_4 
GOTO LABEL_if_4_end 
LABEL_if_4_else: 
printf str_5 
LABEL_if_4_end: 
a@1#-16*0 >= b@1#-20*0 
BZ LABEL_if_5_else 
printf str_6 
GOTO LABEL_if_5_end 
LABEL_if_5_else: 
printf str_7 
LABEL_if_5_end: 
a@1#-16*0 != b@1#-20*0 
BZ LABEL_if_6_else 
printf str_8 
GOTO LABEL_if_6_end 
LABEL_if_6_else: 
printf str_9 
LABEL_if_6_end: 
a@1#-16*0 == b@1#-20*0 
BZ LABEL_if_7_else 
printf str_10 
GOTO LABEL_if_7_end 
LABEL_if_7_else: 
printf str_11 
LABEL_if_7_end: 
d@1#-24*0 < e@1#-28*0 
BZ LABEL_if_8_else 
printf str_12 
GOTO LABEL_if_8_end 
LABEL_if_8_else: 
printf str_13 
LABEL_if_8_end: 
d@1#-24*0 <= e@1#-28*0 
BZ LABEL_if_9_else 
printf str_14 
GOTO LABEL_if_9_end 
LABEL_if_9_else: 
printf str_15 
LABEL_if_9_end: 
d@1#-24*0 > e@1#-28*0 
BZ LABEL_if_10_else 
printf str_16 
GOTO LABEL_if_10_end 
LABEL_if_10_else: 
printf str_17 
LABEL_if_10_end: 
d@1#-24*0 >= e@1#-28*0 
BZ LABEL_if_11_else 
printf str_18 
GOTO LABEL_if_11_end 
LABEL_if_11_else: 
printf str_19 
LABEL_if_11_end: 
d@1#-24*0 != e@1#-28*0 
BZ LABEL_if_12_else 
printf str_20 
GOTO LABEL_if_12_end 
LABEL_if_12_else: 
printf str_21 
LABEL_if_12_end: 
d@1#-24*0 == e@1#-28*0 
BZ LABEL_if_13_else 
printf str_22 
GOTO LABEL_if_13_end 
LABEL_if_13_else: 
printf str_23 
LABEL_if_13_end: 
printf str_24 
void test_charandid() 
LABEL_func_3_begin: 
const char _@1#-16*1 = '_' 
const char a@1#-20*1 = 'a' 
const char b@1#-24*1 = 'b' 
const char c@1#-28*1 = 'c' 
const char d@1#-32*1 = 'd' 
const char e@1#-36*1 = 'e' 
const char f@1#-40*1 = 'f' 
const char g@1#-44*1 = 'g' 
const char h@1#-48*1 = 'h' 
const char i@1#-52*1 = 'i' 
const char j@1#-56*1 = 'j' 
const char k@1#-60*1 = 'k' 
const char l@1#-64*1 = 'l' 
const char m@1#-68*1 = 'm' 
const char n@1#-72*1 = 'n' 
const char o@1#-76*1 = 'o' 
const char p@1#-80*1 = 'p' 
const char q@1#-84*1 = 'q' 
const char r@1#-88*1 = 'r' 
const char s@1#-92*1 = 's' 
const char t@1#-96*1 = 't' 
const char u@1#-100*1 = 'u' 
const char v@1#-104*1 = 'v' 
const char w@1#-108*1 = 'w' 
const char x@1#-112*1 = 'x' 
const char y@1#-116*1 = 'y' 
const char z@1#-120*1 = 'z' 
const char aa@1#-124*1 = 'A' 
const char bb@1#-128*1 = 'B' 
const char cc@1#-132*1 = 'C' 
const char dd@1#-136*1 = 'D' 
const char ee@1#-140*1 = 'E' 
const char ff@1#-144*1 = 'F' 
const char gg@1#-148*1 = 'G' 
const char hh@1#-152*1 = 'H' 
const char ii@1#-156*1 = 'I' 
const char jj@1#-160*1 = 'J' 
const char kk@1#-164*1 = 'K' 
const char ll@1#-168*1 = 'L' 
const char mm@1#-172*1 = 'M' 
const char nn@1#-176*1 = 'N' 
const char oo@1#-180*1 = 'O' 
const char pp@1#-184*1 = 'P' 
const char qq@1#-188*1 = 'Q' 
const char rr@1#-192*1 = 'R' 
const char ss@1#-196*1 = 'S' 
const char tt@1#-200*1 = 'T' 
const char uu@1#-204*1 = 'U' 
const char vv@1#-208*1 = 'V' 
const char ww@1#-212*1 = 'W' 
const char xx@1#-216*1 = 'X' 
const char yy@1#-220*1 = 'Y' 
const char zz@1#-224*1 = 'Z' 
const char h0@1#-228*1 = '+' 
const char h1@1#-232*1 = '-' 
const char h2@1#-236*1 = '*' 
const char h3@1#-240*1 = '/' 
const char h456789@1#-244*1 = '4' 
printf str_25 
int test_operator() 
int x 
LABEL_func_4_begin: 
$t6@1#-20 = 3 * 4 
$t7@1#-24 = 2 * 7 
$t8@1#-28 = $t7@1#-24 / 3 
$t9@1#-32 = $t6@1#-20 + $t8@1#-28 
printf $t9@1#-32 
$t10@1#-36 = 3 - 5 
$t11@1#-40 = $t10@1#-36 * x@1#-16*0 
$t12@1#-44 = $t11@1#-40 + 8 
printf $t12@1#-44 
ret 1 
int test_num() 
LABEL_func_5_begin: 
const int a@1#-16*0 = 1234567 
const int b@1#-20*0 = 890 
const int c@1#-24*0 = -199 
const int d@1#-28*0 = 199 
const int e@1#-32*0 = 0 
char test_string() 
LABEL_func_6_begin: 
printf str_26 
ret 0 
void test_define() 
LABEL_func_7_begin: 
var int a@1#-16*0 
var int b@1#-20*0 
var int c@1#-24*0 
var int d@1#-28*0 
var char ee@1#-32*1 
var char e@1#-36*1 
var char eee@1#-40*1 
ret 
void test_func() 
LABEL_func_8_begin: 
const int a@1#-16*0 = 10 
var int b@1#-20*0 
b@1#-20*0 = 20 
$t13@1#-24 = a@1#-16*0 + b@1#-20*0 
printf $t13@1#-24 
void test_condition() 
int x 
LABEL_func_9_begin: 
x@1#-16*0 == 2 
BZ LABEL_case_0_end 
printf str_27 
GOTO LABEL_switch_0_end 
LABEL_case_0_end: 
x@1#-16*0 == 3 
BZ LABEL_case_1_end 
printf str_28 
GOTO LABEL_switch_0_end 
LABEL_case_1_end: 
printf str_29 
LABEL_switch_0_end: 
void test_while() 
LABEL_func_10_begin: 
var int i@1#-16*0 
i@1#-16*0 = 0 
LABEL_while_0_begin: 
i@1#-16*0 < 5 
BZ LABEL_while_0_end 
printf i@1#-16*0 
$t14@1#-20 = i@1#-16*0 + 1 
i@1#-16*0 = $t14@1#-20 
GOTO LABEL_while_0_begin 
LABEL_while_0_end: 
void main() 
LABEL_func_11_begin: 
push 3 
push 4 
push 'a' 
push 'b' 
call test_logic 
push 4 
push 3 
push 'b' 
push 'a' 
call test_logic 
push 3 
push 3 
push 'a' 
push 'a' 
call test_logic 
push 2 
call test_operator 
call test_charandid 
call test_num 
call test_string 
call test_define 
call test_func 
scanf m@0#-20*0 
push m@0#-20*0 
call fact 
$t15@1#-16 = ret 
$t16@1#-20 = $t15@1#-16 + 'a' 
printf $t16@1#-20 
scanf a@0#-24*0 
scanf b@0#-28*0 
printf a@0#-24*0 
call test_array 
push 2 
call test_condition 
push 3 
call test_condition 
push 4 
call test_condition 
call test_while 
